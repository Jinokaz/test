// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract MyNFT is ERC721 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    struct NFTMetadata {
        string name;
        string description;
        string attribute1;
        string attribute2;
        string attribute3;
    }

    mapping(uint256 => NFTMetadata) public tokenMetadata;

    constructor() ERC721("MyNFT", "MNFT") {}

    function createNFT(
        address recipient,
        string memory name,
        string memory description,
        string memory attribute1,
        string memory attribute2,
        string memory attribute3
    ) public returns (uint256) {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();

        address mintAddress = recipient == address(0) ? msg.sender : recipient;
        _mint(mintAddress, newItemId);
        tokenMetadata[newItemId] = NFTMetadata(name, description, attribute1, attribute2, attribute3);

        return newItemId;
    }

    function getNFTMetadata(uint256 tokenId) public view returns (NFTMetadata memory) {
        require(bytes(tokenMetadata[tokenId].name).length > 0, "ERC721Metadata: Query for nonexistent token");
        return tokenMetadata[tokenId];
    }

    function getAllNFTs() public view returns (NFTMetadata[] memory) {
        uint256 totalTokens = _tokenIds.current();
        uint256 count = 0;

        // Calculer le nombre de tokens existants
        for (uint256 i = 1; i <= totalTokens; i++) {
            if (bytes(tokenMetadata[i].name).length > 0) {
                count++;
            }
        }

        NFTMetadata[] memory tokens = new NFTMetadata[](count);
        uint256 index = 0;

        // Remplir le tableau avec les métadonnées des tokens existants
        for (uint256 i = 1; i <= totalTokens; i++) {
            if (bytes(tokenMetadata[i].name).length > 0) {
                tokens[index] = tokenMetadata[i];
                index++;
            }
        }

        return tokens;
    }
}
